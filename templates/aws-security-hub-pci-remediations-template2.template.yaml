Description: AWS Security Hub PCI Remediations Security Hub Custom Actions
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  EmailAddress:
    Description: Email Address for notifications for PCI.CW.1
    Type: String
    Default: admin@example.com
  DeliveryChannelExists:
    Description: Choose 'true' if Delivery Channel is already provisioned
    Type: String
    Default: 'true'
    AllowedValues:
      - 'false'
      - 'true'
Conditions:
  CreateDeliveryChannel:
    Fn::Equals:
      - Ref: DeliveryChannelExists
      - 'false'
Resources:
  AlarmNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: AlarmNotificationTopic
      TopicName: AlarmNotificationTopic
  AlarmEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      Endpoint:
        Ref: EmailAddress
      TopicArn:
        Ref: AlarmNotificationTopic
  CloudTrailLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: DefaultLogGroup-PCI-${AWS::Region}
      RetentionInDays: 1827
  CreateSecurityHubCustomActionTargetLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CreateSecurityHubCustomActionTargetLambda
      Description: Custom resource to create an action target in Security Hub
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        ZipFile: "import boto3\nimport cfnresponse\nimport os\ndef lambda_handler(event, context):\n    try:\n        properties = event['ResourceProperties']\n        region = os.environ['AWS_REGION']\n\
          \        client = boto3.client('securityhub', region_name=region)\n        responseData = {}\n        if event['RequestType'] == 'Create':\n            response = client.create_action_target(\n\
          \                Name=properties['Name'],\n                Description=properties['Description'],\n                Id=properties['Id']\n            )\n            responseData['Arn'] = response['ActionTargetArn']\n\
          \        elif event['RequestType'] == 'Delete':\n            account_id = context.invoked_function_arn.split(\":\")[4]\n            client.delete_action_target(\n                ActionTargetArn=f\"\
          arn:aws:securityhub:{region}:{account_id}:action/custom/{properties['Id']}\"\n            )\n        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)\n    except Exception as\
          \ e:\n        print(e)\n        cfnresponse.send(event, context, cfnresponse.FAILED, {})\n"
  CreateSecurityHubCustomActionTargetLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: CreateActionTarget-LambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - securityhub:CreateActionTarget
                  - securityhub:DeleteActionTarget
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  ConfigurationRecorder:
    Condition: CreateDeliveryChannel
    Type: AWS::Config::ConfigurationRecorder
    Properties:
      RoleARN:
        Fn::GetAtt:
          - IamRoleForAwsConfig
          - Arn
      RecordingGroup:
        AllSupported: true
        IncludeGlobalResourceTypes: true
  DeliveryChannel:
    Condition: CreateDeliveryChannel
    Type: AWS::Config::DeliveryChannel
    Properties:
      ConfigSnapshotDeliveryProperties:
        DeliveryFrequency: One_Hour
      S3BucketName:
        Ref: S3BucketForAwsConfig
  S3BucketForAwsConfig:
    Condition: CreateDeliveryChannel
    Type: AWS::S3::Bucket
    Properties: {}
  IamRoleForAwsConfig:
    Condition: CreateDeliveryChannel
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSConfigRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: allow-access-to-config-s3-bucket
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - Fn::Join:
                      - ''
                      - - Fn::GetAtt:
                            - S3BucketForAwsConfig
                            - Arn
                        - /*
                Condition:
                  StringLike:
                    s3:x-amz-acl: bucket-owner-full-control
              - Effect: Allow
                Action:
                  - s3:GetBucketAcl
                Resource:
                  Fn::GetAtt:
                    - S3BucketForAwsConfig
                    - Arn
  S3BucketPublicWriteProhibitedRule:
    Type: AWS::Events::Rule
    Properties:
      Name: S3BucketPublicWriteProhibitedRule
      Description: PCI.S3.1 - S3 Buckets should prohibit public write access
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - S3BucketPublicWriteActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - S3BucketPublicWriteRemediationLambda
              - Arn
          Id: PCIS31
  S3BucketPublicWriteActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: PCIS31
      Description: S3 Public Write Event from Security Hub
      Id: PCIS31
  S3BucketPublicWriteRemediationLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: S3BucketPublicWriteRemediationLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - S3BucketPublicWriteProhibitedRule
          - Arn
  S3BucketPublicWriteRemediationLambda:
    Type: AWS::Lambda::Function
    DependsOn: S3RemediationLambdaRole
    Properties:
      FunctionName: S3BucketPublicWriteRemediationLambda
      Description: PCI S3.1 Remediation using AWS SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - S3RemediationLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n  \n    S3BucketArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])\n    Id = str(event['detail']['findings'][0]['Id'])\n\
          \    S3BucketName = S3BucketArn.replace(\"arn:aws:s3:::\", \"\")\n    ssm = boto3.client('ssm')\n    try:\n        response = ssm.start_automation_execution(\n            DocumentName='AWS-DisableS3BucketPublicReadWrite',\n\
          \            DocumentVersion='1', # default\n            Parameters={\n                'S3BucketName': [ S3BucketName ]\n            }\n        )\n\n    except Exception as e:\n        print(e)\n\
          \        print(\"SSM automation execution error\")\n        raise\n"
  S3RemediationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: S3RemediationLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - s3:GetBucketAcl
                  - s3:GetBucketPolicy
                  - s3:PutBucketAcl
                  - s3:PutBucketPolicy
                  - s3:PutBucketPublicAccessBlock
                  - iam:PassRole
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  S3BucketPublicReadProhibitedRule:
    Type: AWS::Events::Rule
    Properties:
      Name: S3BucketPublicReadProhibitedRule
      Description: PCI.S3.2 - S3 Buckets should prohibit public read access
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - S3BucketPublicReadActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - S3BucketPublicReadRemediationLambda
              - Arn
          Id: PCIS32
  S3BucketPublicReadActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: PCIS32
      Description: S3 Public Write Event from Security Hub
      Id: PCIS32
  S3BucketPublicReadRemediationLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: S3BucketPublicReadRemediationLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - S3BucketPublicReadProhibitedRule
          - Arn
  S3BucketPublicReadRemediationLambda:
    Type: AWS::Lambda::Function
    DependsOn: S3RemediationLambdaRole
    Properties:
      FunctionName: S3BucketPublicReadRemediationLambda
      Description: PCI S3.2 Remediation using AWS SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - S3RemediationLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n  \n    S3BucketArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])\n    Id = str(event['detail']['findings'][0]['Id'])\n\
          \    S3BucketName = S3BucketArn.replace(\"arn:aws:s3:::\", \"\")\n    ssm = boto3.client('ssm')\n    try:\n        response = ssm.start_automation_execution(\n            DocumentName='AWS-DisableS3BucketPublicReadWrite',\n\
          \            DocumentVersion='1', # default\n            Parameters={\n                'S3BucketName': [ S3BucketName ]\n            }\n        )\n\n    except Exception as e:\n        print(e)\n\
          \        print(\"SSM automation execution error\")\n        raise\n"
  RootAccountLoginsAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
      - NoMfaConsoleLoginsAlarm
    Properties:
      AlarmName: PCI-Root Activity
      AlarmDescription: Alarm if a 'root' user uses the account
      MetricName: RootUserEventCount
      Namespace: LogMetrics
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      TreatMissingData: notBreaching
      AlarmActions:
        - Ref: AlarmNotificationTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
  RootAccountLoginsFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName:
        Ref: CloudTrailLogGroup
      FilterPattern: "{\n  $.userIdentity.type = \"Root\" &&\n  $.userIdentity.invokedBy NOT EXISTS &&\n  $.eventType != \"AwsServiceEvent\"\n}"
      MetricTransformations:
        - MetricValue: '1'
          MetricNamespace: LogMetrics
          MetricName: RootUserEventCount
  NoMfaConsoleLoginsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: PCI-Console Signin Without MFA
      AlarmDescription: Alarm if there is a Management Console sign-in without MFA
      MetricName: ConsoleSigninWithoutMFA
      Namespace: LogMetrics
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      TreatMissingData: notBreaching
      AlarmActions:
        - Ref: AlarmNotificationTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
  NoMfaConsoleLoginsFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName:
        Ref: CloudTrailLogGroup
      FilterPattern: "{\n  ($.eventName = \"ConsoleLogin\") &&\n  ($.additionalEventData.MFAUsed != \"Yes\")\n}"
      MetricTransformations:
        - MetricValue: '1'
          MetricNamespace: LogMetrics
          MetricName: ConsoleSigninWithoutMFA
  CloudTrailEncryptionEnabledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: CloudTrailEncryptionEnabledRule
      Description: PCI.CloudTrail.1 – Ensure CloudTrail logs are encrypted at rest using AWS KMS CMKs
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - CloudTrailEncryptionEnabledActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - CloudTrailEncryptionEnabledLambda
              - Arn
          Id: PCICloudTrail1
  CloudTrailEncryptionEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: PCICloudTrail1
      Description: PCI.CloudTrail.1 Event from Security Hub
      Id: PCICloudTrail1
  CloudTrailEncryptionEnabledPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: CloudTrailEncryptionEnabledLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - CloudTrailEncryptionEnabledRule
          - Arn
  CloudTrailEncryptionEnabledLambda:
    Type: AWS::Lambda::Function
    DependsOn: CloudTrailEncryptionEnabledLambdaRole
    Properties:
      FunctionName: CloudTrailEncryptionEnabledLambda
      Description: PCI CloudTrail.1 Remediation
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - CloudTrailEncryptionEnabledLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Environment:
        Variables:
          CloudTrailLogGroupArn:
            Fn::ImportValue: CloudTrailLogGroupArn
          CloudWatchRoleArn:
            Fn::ImportValue: CloudWatchRoleArn
          KMSKeyArn:
            Fn::ImportValue: KMSKeyArn
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n    TrailArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])\n    TrailArn_1 = TrailArn.split(':')[-1]\
          \ \n    TrailName = TrailArn_1.replace(\"trail/\",\"\")\n\n    Id = str(event['detail']['findings'][0]['Id'])\n    CloudTrailLogGroupArn = os.environ['CloudTrailLogGroupArn']\n    CloudWatchRoleArn\
          \ = os.environ['CloudWatchRoleArn']\n    KMSKeyArn = os.environ['KMSKeyArn']\n    ssm = boto3.client('ssm')\n    try:\n        response = ssm.start_automation_execution(\n            DocumentName='PCICloudTrail1Automation',\n\
          \            DocumentVersion='1', # default\n            Parameters={\n                'TrailName': [ TrailName ],\n                'CloudTrailLogGroupArn': [ CloudTrailLogGroupArn ],\n      \
          \          'CloudWatchRoleArn': [ CloudWatchRoleArn ],\n                'KMSKeyArn': [ KMSKeyArn ]\n            }\n        )\n\n    except Exception as e:\n        print(e)\n        print(\"SSM\
          \ automation execution error\")\n        raise\n"
  CloudTrailEncryptionEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: CloudTrailEncryptionEnabledLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - iam:PassRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudtrail:UpdateTrail
                  - kms:*
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  CMKBackingKeyRotationRule:
    Type: AWS::Events::Rule
    Properties:
      Name: CMKBackingKeyRotationRule
      Description: PCI.KMS.1 – Ensure rotation for customer created CMKs is enabled
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - CMKBackingKeyRotationActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - CMKBackingKeyRotationLambda
              - Arn
          Id: PCIKMS1
  CMKBackingKeyRotationActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: PCIKMS1
      Description: PCI KMS.1 Event from Security Hub
      Id: PCIKMS1
  CMKBackingKeyRotationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: CMKBackingKeyRotationLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - CMKBackingKeyRotationRule
          - Arn
  CMKBackingKeyRotationLambda:
    Type: AWS::Lambda::Function
    DependsOn: CMKBackingKeyRotationLambdaRole
    Properties:
      FunctionName: CMKBackingKeyRotationLambda
      Description: PCI KMS.1 Remediation using Custom SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - CMKBackingKeyRotationLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n    \n    KMSKeyArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])\n    KMSKeyId_1 = KMSKeyArn.split(':')[-1]\
          \ \n    KMSKeyId = KMSKeyId_1.replace(\"key/\",\"\")\n\n    Id = str(event['detail']['findings'][0]['Id'])\n    ssm = boto3.client('ssm')\n    try:\n        response = ssm.start_automation_execution(\n\
          \            DocumentName='PCIKMS1Automation',\n            DocumentVersion='1', # default\n            Parameters={\n                'KMSKeyArn': [ KMSKeyId ]\n            }\n        )\n\n  \
          \  except Exception as e:\n        print(e)\n        print(\"SSM automation execution error\")\n        raise\n"
  CMKBackingKeyRotationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: CMKBackingKeyRotationLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - iam:PassRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudtrail:UpdateTrail
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  RemoveUnusedEC2SecurityGroupsRule:
    Type: AWS::Events::Rule
    Properties:
      Name: RemoveUnusedEC2SecurityGroupsRule
      Description: PCI.EC2.3 – Unused EC2 Security Groups should be removed
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - RemoveUnusedEC2GroupsActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - RemoveUnusedEC2GroupsRemediationLambda
              - Arn
          Id: PCIEC23
  RemoveUnusedEC2GroupsActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: PCIEC23
      Description: PCI.EC2.3 Event from Security Hub
      Id: PCIEC23
  RemoveUnusedEC2GroupsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: RemoveUnusedEC2GroupsRemediationLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - RemoveUnusedEC2SecurityGroupsRule
          - Arn
  RemoveUnusedEC2GroupsRemediationLambda:
    Type: AWS::Lambda::Function
    DependsOn: RemoveUnusedEC2GroupsRemediationLambdaRole
    Properties:
      FunctionName: RemoveUnusedEC2GroupsRemediationLambda
      Description: PCI.EC2.3 Remediation using AWS SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - RemoveUnusedEC2GroupsRemediationLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n    securitygroup = str(event['detail']['findings'][0]['Resources'][0]['Details']['AwsEc2SecurityGroup']['GroupId'])\n\
          \    Id = str(event['detail']['findings'][0]['Id'])\n    ssm = boto3.client('ssm')\n    try:\n        response = ssm.start_automation_execution(\n            DocumentName='PCIEC23Automation',\n\
          \            DocumentVersion='1', # default\n            Parameters={\n                'groupId': [ securitygroup]\n            }\n        )\n\n    except Exception as e:\n        print(e)\n \
          \       print(\"SSM automation execution error\")\n        raise\n"
  RemoveUnusedEC2GroupsRemediationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: RemoveUnusedEC2GroupsRemediationLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - ec2:DescribeSecurityGroupReferences
                  - ec2:DescribeSecurityGroups
                  - ec2:UpdateSecurityGroupRuleDescriptionsEgress
                  - ec2:UpdateSecurityGroupRuleDescriptionsIngress
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:*
                  - iam:PassRole
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  VPCDefaultSecurityGroupsRule:
    Type: AWS::Events::Rule
    Properties:
      Name: VPCDefaultSecurityGroupsRule
      Description: PCI.EC2.2 VPC default security group should prohibit inbound and outbound traffic
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - VPCDefaultGroupsActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - VPCDefaultGroupsRemediationLambda
              - Arn
          Id: PCIEC22
  VPCDefaultGroupsActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: PCIEC22
      Description: PCI.EC2.2 Event from Security Hub
      Id: PCIEC22
  VPCDefaultGroupsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: VPCDefaultGroupsRemediationLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - VPCDefaultSecurityGroupsRule
          - Arn
  VPCDefaultGroupsRemediationLambda:
    Type: AWS::Lambda::Function
    DependsOn: VPCDefaultGroupsRemediationLambdaRole
    Properties:
      FunctionName: VPCDefaultGroupsRemediationLambda
      Description: PCI.EC2.2 Remediation using AWS SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - VPCDefaultGroupsRemediationLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n    securitygroup = str(event['detail']['findings'][0]['Resources'][0]['Details']['AwsEc2SecurityGroup']['GroupId'])\n\
          \    Id = str(event['detail']['findings'][0]['Id'])\n    ssm = boto3.client('ssm')\n    IpAddressToBlock = '0.0.0.0/0'\n    try:\n        response = ssm.start_automation_execution(\n         \
          \   DocumentName='PCIEC22Automation',\n            DocumentVersion='1', # default\n            Parameters={\n                'groupId': [ securitygroup],\n                 'IpAddressToBlock':\
          \ [IpAddressToBlock]\n            }\n        )\n\n    except Exception as e:\n        print(e)\n        print(\"SSM automation execution error\")\n        raise\n"
  VPCDefaultGroupsRemediationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: VPCDefaultGroupsRemediationLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - ec2:DescribeSecurityGroupReferences
                  - ec2:DescribeSecurityGroups
                  - ec2:UpdateSecurityGroupRuleDescriptionsEgress
                  - ec2:UpdateSecurityGroupRuleDescriptionsIngress
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:*
                  - iam:PassRole
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  RestrictEC2SecurityGroupsRule:
    Type: AWS::Events::Rule
    Properties:
      Name: RestrictEC2SecurityGroupsRule
      Description: PCI.EC2.5 Restrict EC2 Security Groups for SSH and RDP Access
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - RestrictEC2GroupsActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - RestrictEC2GroupsRemediationLambda
              - Arn
          Id: PCIEC25
  RestrictEC2GroupsActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: PCIEC25
      Description: PCI.EC2.5 Event from Security Hub
      Id: PCIEC25
  RestrictEC2GroupsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: RestrictEC2GroupsRemediationLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - RestrictEC2SecurityGroupsRule
          - Arn
  RestrictEC2GroupsRemediationLambda:
    Type: AWS::Lambda::Function
    DependsOn: RestrictEC2GroupsRemediationLambdaRole
    Properties:
      FunctionName: RestrictEC2GroupsRemediationLambda
      Description: PCI.EC2.5 Remediation using AWS SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - RestrictEC2GroupsRemediationLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n    securitygroup = str(event['detail']['findings'][0]['Resources'][0]['Details']['AwsEc2SecurityGroup']['GroupId'])\n\
          \    Id = str(event['detail']['findings'][0]['Id'])\n    ssm = boto3.client('ssm')\n    IpAddressToBlock = '0.0.0.0/0'\n    try:\n        response = ssm.start_automation_execution(\n         \
          \   DocumentName='PCIEC22Automation',\n            DocumentVersion='1', # default\n            Parameters={\n                'groupId': [ securitygroup],\n                 'IpAddressToBlock':\
          \ [IpAddressToBlock]\n            }\n        )\n\n    except Exception as e:\n        print(e)\n        print(\"SSM automation execution error\")\n        raise\n"
  RestrictEC2GroupsRemediationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: RestrictEC2GroupsRemediationLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - ec2:DescribeSecurityGroupReferences
                  - ec2:DescribeSecurityGroups
                  - ec2:UpdateSecurityGroupRuleDescriptionsEgress
                  - ec2:UpdateSecurityGroupRuleDescriptionsIngress
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:*
                  - iam:PassRole
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  AutoScalingELBHealthCheckRule:
    Type: AWS::Events::Rule
    Properties:
      Name: AutoScalingELBHealthCheckRule
      Description: '[PCI.AutoScaling.1] Auto scaling groups associated with a load balancer should use health checks'
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - AutoScalingELBHealthCheckActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - AutoScalingELBHealthCheckRemediationLambda
              - Arn
          Id: PCIAutoScaling1
  AutoScalingELBHealthCheckActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: PCIAutoScaling1
      Description: PCI.AutoScaling.1 Event from Security Hub
      Id: PCIAutoScaling1
  AutoScalingELBHealthCheckLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: AutoScalingELBHealthCheckRemediationLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - AutoScalingELBHealthCheckRule
          - Arn
  AutoScalingELBHealthCheckRemediationLambda:
    Type: AWS::Lambda::Function
    DependsOn: AutoScalingELBHealthCheckRemediationLambdaRole
    Properties:
      FunctionName: AutoScalingELBHealthCheckRemediationLambda
      Description: PCI.AutoScaling.1 Remediation using AWS SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - AutoScalingELBHealthCheckRemediationLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n    ASGId = str(event['detail']['findings'][0]['Resources'][0]['Id'])\n\n    ASGId_1 = ASGId.split(':')[-1]\n\
          \    ASGGroupName = ASGId_1.replace(\"autoScalingGroupName/\",\"\")\n    \n    ssm = boto3.client('ssm')\n    try:\n        response = ssm.start_automation_execution(\n            DocumentName='PCIAutoScaling1Automation',\n\
          \            DocumentVersion='1', # default\n            Parameters={\n                'ASGGroupName': [ ASGGroupName]\n            }\n        )\n\n    except Exception as e:\n        print(e)\n\
          \        print(\"SSM automation execution error\")\n        raise\n"
  AutoScalingELBHealthCheckRemediationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: AutoScalingELBHealthCheckRemediationLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - ec2:DescribeSecurityGroupReferences
                  - ec2:DescribeSecurityGroups
                  - ec2:UpdateSecurityGroupRuleDescriptionsEgress
                  - ec2:UpdateSecurityGroupRuleDescriptionsIngress
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:*
                  - autoscaling:*
                  - iam:PassRole
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  CodeBuildEnvVariablesRule:
    Type: AWS::Events::Rule
    Properties:
      Name: CodeBuildEnvVariablesRule
      Description: '[PCI.CodeBuild.2] CodeBuild project environment variables should not contain clear text credentials'
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - CodeBuildEnvVariablesRuleActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - CodeBuildEnvVariablesRuleRemediationLambda
              - Arn
          Id: PCICodeBuild2
  CodeBuildEnvVariablesRuleActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: PCICodeBuild2
      Description: PCI.CodeBuild.2 Event from Security Hub
      Id: PCICodeBuild2
  CodeBuildEnvVariablesRuleLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: CodeBuildEnvVariablesRuleRemediationLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - CodeBuildEnvVariablesRule
          - Arn
  CodeBuildEnvVariablesRuleRemediationLambda:
    Type: AWS::Lambda::Function
    DependsOn: CodeBuildEnvVariablesRuleRemediationLambdaRole
    Properties:
      FunctionName: CodeBuildEnvVariablesRuleRemediationLambda
      Description: PCI.CodeBuild.2 Remediation using AWS SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - CodeBuildEnvVariablesRuleRemediationLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n\n    codebuildprojectArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])\n    codebuildprojectArn_1\
          \ = codebuildprojectArn.split(':')[-1] \n    codebuildproject = codebuildprojectArn_1.replace(\"project/\",\"\")\n\n    Id = str(event['detail']['findings'][0]['Id'])\n    ssm = boto3.client('ssm')\n\
          \    try:\n        response = ssm.start_automation_execution(\n            DocumentName='PCICodeBuild2Automation',\n            DocumentVersion='1', # default\n            Parameters={\n     \
          \           'projectName': [ codebuildproject]\n            }\n        )\n\n    except Exception as e:\n        print(e)\n        print(\"SSM automation execution error\")\n        raise\n"
  CodeBuildEnvVariablesRuleRemediationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: CodeBuildEnvVariablesRuleRemediationLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - ec2:DescribeSecurityGroupReferences
                  - ec2:DescribeSecurityGroups
                  - ec2:UpdateSecurityGroupRuleDescriptionsEgress
                  - ec2:UpdateSecurityGroupRuleDescriptionsIngress
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:*
                  - codebuild:*
                  - iam:PassRole
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  ReleaseEIPRule:
    Type: AWS::Events::Rule
    Properties:
      Name: ReleaseEIPRule
      Description: PCI.EC2.4 Unused EC2 EIPs should be removed
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - ReleaseEIPRuleActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - ReleaseEIPRuleRemediationLambda
              - Arn
          Id: PCIEC24
  ReleaseEIPRuleActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: PCIEC24
      Description: PCI.EC2.4 Event from Security Hub
      Id: PCIEC24
  ReleaseEIPRuleLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: ReleaseEIPRuleRemediationLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - ReleaseEIPRule
          - Arn
  ReleaseEIPRuleRemediationLambda:
    Type: AWS::Lambda::Function
    DependsOn: ReleaseEIPRuleRemediationLambdaRole
    Properties:
      FunctionName: ReleaseEIPRuleRemediationLambda
      Description: PCI.EC2.4 Remediation using AWS SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - ReleaseEIPRuleRemediationLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n\n    AllocationArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])\n    AllocationArn_1 = AllocationArn.split(':')[-1]\n\
          \    AllocationId = AllocationArn_1.replace(\"eip-allocation/\",\"\")\n\n    ssm = boto3.client('ssm')\n    try:\n        response = ssm.start_automation_execution(\n            DocumentName='AWS-ReleaseElasticIP',\n\
          \            DocumentVersion='1', # default\n            Parameters={\n                'AllocationId': [ AllocationId]\n            }\n        )\n\n    except Exception as e:\n        print(e)\n\
          \        print(\"SSM automation execution error\")\n        raise\n"
  ReleaseEIPRuleRemediationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: ReleaseEIPRuleRemediationLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - ec2:DescribeSecurityGroupReferences
                  - ec2:DescribeSecurityGroups
                  - ec2:UpdateSecurityGroupRuleDescriptionsEgress
                  - ec2:UpdateSecurityGroupRuleDescriptionsIngress
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:*
                  - iam:PassRole
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  CloudTrailCloudWatchLogsEnabledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: CloudTrailCloudWatchLogsEnabledRule
      Description: PCI.CloudTrail.4 – Ensure CloudTrail trails are integrated with Amazon CloudWatch Logs
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - CloudTrailCloudWatchLogsActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - CloudTrailCloudWatchLogsLambda
              - Arn
          Id: PCICloudTrail4
  CloudTrailCloudWatchLogsActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: PCICloudTrail4
      Description: PCI.CloudTrail.4 Event from Security Hub
      Id: PCICloudTrail4
  CloudTrailCloudWatchLogsEnabledPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: CloudTrailCloudWatchLogsLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - CloudTrailCloudWatchLogsEnabledRule
          - Arn
  CloudTrailCloudWatchLogsLambda:
    Type: AWS::Lambda::Function
    DependsOn: CloudTrailCloudWatchLogsLambdaRole
    Properties:
      FunctionName: CloudTrailCloudWatchLogsLambda
      Description: PCI.CloudTrail.4 Remediation using Custom SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - CloudTrailCloudWatchLogsLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Environment:
        Variables:
          CloudTrailLogGroupArn:
            Fn::ImportValue: CloudTrailLogGroupArn
          CloudWatchRoleArn:
            Fn::ImportValue: CloudWatchRoleArn
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n\n    TrailArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])\n    TrailArn_1 = TrailArn.split(':')[-1]\
          \ \n    TrailName = TrailArn_1.replace(\"trail/\",\"\")\n\n    Id = str(event['detail']['findings'][0]['Id'])\n    CloudTrailLogGroupArn = os.environ['CloudTrailLogGroupArn']\n    CloudWatchRoleArn\
          \ = os.environ['CloudWatchRoleArn']\n    ssm = boto3.client('ssm')\n    try:\n        response = ssm.start_automation_execution(\n            DocumentName='PCICloudTrail4Automation',\n       \
          \     DocumentVersion='1', # default\n            Parameters={\n                'TrailName': [ TrailName ],\n                'CloudTrailLogGroupArn': [ CloudTrailLogGroupArn ],\n             \
          \   'CloudWatchRoleArn': [ CloudWatchRoleArn ]\n            }\n        )\n\n    except Exception as e:\n        print(e)\n        print(\"SSM automation execution error\")\n        raise\n"
  CloudTrailCloudWatchLogsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: CloudTrailCloudWatchLogsLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - iam:PassRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudtrail:UpdateTrail
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  CloudTrailEnabledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: CloudTrailEnabledRule
      Description: PCI.CloudTrail.2 – Ensure CloudTrail is enabled in all regions
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - CloudTrailEnabledActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - CloudTrailEnabledLambda
              - Arn
          Id: PCICloudTrail2
  CloudTrailEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: PCICloudTrail2
      Description: PCI.CloudTrail.2 Event from Security Hub
      Id: PCICloudTrail2
  CloudTrailEnabledPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: CloudTrailEnabledLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - CloudTrailEnabledRule
          - Arn
  CloudTrailEnabledLambda:
    Type: AWS::Lambda::Function
    DependsOn: CloudTrailEnabledLambdaRole
    Properties:
      FunctionName: CloudTrailEnabledLambda
      Description: CIS 2.1 Remediation using Custom SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - CloudTrailEnabledLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Environment:
        Variables:
          S3BucketName:
            Fn::ImportValue: PCIS3CloudTrailBucket
          TrailName:
            Fn::ImportValue: PCICloudTrail
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n    TrailName = os.environ['TrailName']\n    S3BucketName = os.environ['S3BucketName']\n    ssm = boto3.client('ssm')\n\
          \    try:\n        response = ssm.start_automation_execution(\n            DocumentName='AWS-EnableCloudTrail',\n            DocumentVersion='1', # default\n            Parameters={\n        \
          \        'TrailName': [ TrailName ],\n                'S3BucketName': [ S3BucketName]\n            }\n        )\n    except Exception as e:\n        print(e)\n        print(\" SSM automation execution\
          \ error\")\n        raise\n"
  CloudTrailEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: CloudTrailEnabledLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - iam:PassRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudtrail:UpdateTrail
                  - cloudtrail:*
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  CloudTrailLogFileValidationEnabledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: CloudTrailLogFileValidationEnabledRule
      Description: PCI.CloudTrail.3 – Ensure CloudTrail log file validation is enabled
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - CloudTrailLogFileValidationEnabledActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - CloudTrailLogFileValidationEnabledLambda
              - Arn
          Id: PCICloudTrail3
  CloudTrailLogFileValidationEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: PCICloudTrail3
      Description: PCI.CloudTrail.3 Event from Security Hub
      Id: PCICloudTrail3
  CloudTrailLogFileValidationEnabledPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: CloudTrailLogFileValidationEnabledLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - CloudTrailLogFileValidationEnabledRule
          - Arn
  CloudTrailLogFileValidationEnabledLambda:
    Type: AWS::Lambda::Function
    DependsOn: CloudTrailLogFileValidationEnabledLambdaRole
    Properties:
      FunctionName: CloudTrailLogFileValidationEnabledLambda
      Description: CIS 2.2 Remediation using Custom SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - CloudTrailLogFileValidationEnabledLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Environment:
        Variables:
          CloudTrailLogGroupArn:
            Fn::ImportValue: CloudTrailLogGroupArn
          CloudWatchRoleArn:
            Fn::ImportValue: CloudWatchRoleArn
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n    \n    TrailArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])\n    TrailArn_1 = TrailArn.split(':')[-1]\
          \ \n    TrailName = TrailArn_1.replace(\"trail/\",\"\")\n\n    Id = str(event['detail']['findings'][0]['Id'])\n    CloudTrailLogGroupArn = os.environ['CloudTrailLogGroupArn']\n    CloudWatchRoleArn\
          \ = os.environ['CloudWatchRoleArn']\n    ssm = boto3.client('ssm')\n    try:\n        response = ssm.start_automation_execution(\n            DocumentName='PCICloudTrail3Automation',\n       \
          \     DocumentVersion='1', # default\n            Parameters={\n                'TrailName': [ TrailName ],\n                'CloudTrailLogGroupArn': [ CloudTrailLogGroupArn ],\n             \
          \   'CloudWatchRoleArn': [ CloudWatchRoleArn ]\n            }\n        )\n\n    except Exception as e:\n        print(e)\n        print(\"SSM automation execution error\")\n        raise\n"
  CloudTrailLogFileValidationEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: CloudTrailLogFileValidationEnabledLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - iam:PassRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudtrail:UpdateTrail
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  IAMPasswordPolicyEnabledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: IAMPasswordPolicyEnabledRule
      Description: PCI IAM 4
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - IAMPasswordPolicyEnabledActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - IAMPasswordPolicyEnabledLambda
              - Arn
          Id: PCIIAM4
  IAMPasswordPolicyEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: PCIIAM4
      Description: PCI IAM 4 Events from Security Hub
      Id: PCIIAM4
  IAMPasswordPolicyEnabledPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: IAMPasswordPolicyEnabledLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - IAMPasswordPolicyEnabledRule
          - Arn
  IAMPasswordPolicyEnabledLambda:
    Type: AWS::Lambda::Function
    DependsOn: IAMPasswordPolicyEnabledLambdaRole
    Properties:
      FunctionName: IAMPasswordPolicyEnabledLambda
      Description: PCI IAM 4
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - IAMPasswordPolicyEnabledLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n    ssm = boto3.client('ssm')\n    try:\n        response = ssm.start_automation_execution(\n            DocumentName='PCIIAM4Automation',\n\
          \            DocumentVersion='1', # default\n        )\n    except Exception as e:\n        print(e)\n        print(\"SSM automation execution error\")\n        raise\n"
  IAMPasswordPolicyEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: IAMPasswordPolicyEnabledLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - iam:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - iam:PassRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudtrail:UpdateTrail
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  DeactivateRootIAMAccessKeyEnabledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: DeactivateRootIAMAccessKeyEnabledRule
      Description: PCI.IAM.1 – Deactivate Root Account Access Key
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - DeactivateRootIAMAccessKeyEnabledActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - DeactivateRootIAMAccessKeyEnabledLambda
              - Arn
          Id: PCIIAM1
  DeactivateRootIAMAccessKeyEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: PCIIAM1
      Description: PCI.IAM.1 Events from Security Hub
      Id: PCIIAM1
  DeactivateRootIAMAccessKeyEnabledPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: DeactivateRootIAMAccessKeyEnabledLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - DeactivateRootIAMAccessKeyEnabledRule
          - Arn
  DeactivateRootIAMAccessKeyEnabledLambda:
    Type: AWS::Lambda::Function
    DependsOn: DeactivateRootIAMAccessKeyEnabledLambdaRole
    Properties:
      FunctionName: DeactivateRootIAMAccessKeyEnabledLambda
      Description: PCI.IAM.1 Remediation using Custom SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - DeactivateRootIAMAccessKeyEnabledLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n    userArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])\n    username = userArn.split(':')[-1]\
          \ \n\n    ssm = boto3.client('ssm')\n    try:\n        response = ssm.start_automation_execution(\n            DocumentName='PCIIAM1Automation',\n            DocumentVersion='1', # default\n \
          \           Parameters={\n                'username': [ username ]\n            }\n        )\n    except Exception as e:\n        print(e)\n        print(\"SSM automation execution error\")\n\
          \        raise\n"
  DeactivateRootIAMAccessKeyEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: DeactivateRootIAMAccessKeyEnabledLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - iam:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - iam:PassRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudtrail:UpdateTrail
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  IAMUserPolicyDetachEnabledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: IAMUserPolicyDetachEnabledRule
      Description: PCI.IAM.2 – Ensure IAM policies are attached only to groups or roles
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - IAMUserPolicyDetachEnabledActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - IAMUserPolicyDetachEnabledLambda
              - Arn
          Id: PCIIAM2
  IAMUserPolicyDetachEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: PCIIAM2
      Description: PCI.IAM.2 Events from Security Hub
      Id: PCIIAM2
  IAMUserPolicyDetachEnabledPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: IAMUserPolicyDetachEnabledLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - IAMUserPolicyDetachEnabledRule
          - Arn
  IAMUserPolicyDetachEnabledLambda:
    Type: AWS::Lambda::Function
    DependsOn: IAMUserPolicyDetachEnabledLambdaRole
    Properties:
      FunctionName: IAMUserPolicyDetachEnabledLambda
      Description: PCI.IAM.2 Remediation using Custom SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - IAMUserPolicyDetachEnabledLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n    userArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])\n    userArn_1 = userArn.split(':')[-1]\
          \ \n    username = userArn_1.replace(\"user/\",\"\")\n\n    Id = str(event['detail']['findings'][0]['Id'])\n\n    ssm = boto3.client('ssm')\n    try:\n        response = ssm.start_automation_execution(\n\
          \            DocumentName='PCIIAM2Automation',\n            DocumentVersion='1', # default\n            Parameters={\n                'username': [ username ],\n                'findingid': [Id]\n\
          \            }\n        )\n    except Exception as e:\n        print(e)\n        print(\"SSM automation execution error\")\n        raise\n"
  IAMUserPolicyDetachEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: IAMUserPolicyDetachEnabledLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - iam:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - iam:PassRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudtrail:UpdateTrail
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  IAMFullAdminPolicyDetachEnabledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: IAMFullAdminPolicyDetachEnabledRule
      Description: PCI.IAM.3 – Ensure IAM policies are attached only to groups or roles
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - IAMFullAdminPolicyDetachEnabledActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - IAMFullAdminPolicyDetachEnabledLambda
              - Arn
          Id: PCIIAM3
  IAMFullAdminPolicyDetachEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: PCIIAM3
      Description: PCI.IAM.3 Events from Security Hub
      Id: PCIIAM3
  IAMFullAdminPolicyDetachEnabledPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: IAMFullAdminPolicyDetachEnabledLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - IAMFullAdminPolicyDetachEnabledRule
          - Arn
  IAMFullAdminPolicyDetachEnabledLambda:
    Type: AWS::Lambda::Function
    DependsOn: IAMFullAdminPolicyDetachEnabledLambdaRole
    Properties:
      FunctionName: IAMFullAdminPolicyDetachEnabledLambda
      Description: PCI.IAM.3 Remediation using Custom SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - IAMFullAdminPolicyDetachEnabledLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n    userArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])\n    userArn_1 = userArn.split(':')[-1]\
          \ \n    username = userArn_1.replace(\"user/\",\"\")\n\n\n    ssm = boto3.client('ssm')\n    try:\n        response = ssm.start_automation_execution(\n            DocumentName='PCIIAM3Automation',\n\
          \            DocumentVersion='1', # default\n            Parameters={\n                'username': [ username ]\n            }\n        )\n    except Exception as e:\n        print(e)\n      \
          \  print(\"SSM automation execution error\")\n        raise\n"
  IAMFullAdminPolicyDetachEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: IAMFullAdminPolicyDetachEnabledLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - iam:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - iam:PassRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudtrail:UpdateTrail
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  S3BucketServerSideEncryptionEnabledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: S3BucketServerSideEncryptionEnabledRule
      Description: PCI S3.4 – Ensure server side encryption is enabled on S3 buckets
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - S3BucketServerSideEncryptionEnabledActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - S3BucketServerSideEncryptionEnabledLambda
              - Arn
          Id: PCIS34
  S3BucketServerSideEncryptionEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: PCIS34
      Description: PCI S3.4 Event from Security Hub
      Id: PCIS34
  S3BucketServerSideEncryptionEnabledPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: S3BucketServerSideEncryptionEnabledLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - S3BucketServerSideEncryptionEnabledRule
          - Arn
  S3BucketServerSideEncryptionEnabledLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: S3BucketServerSideEncryptionEnabledLambda
      Description: PCI S3.4 Remediation using Custom SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - S3BucketServerSideEncryptionEnabledLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n    S3BucketArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])\n    Id = str(event['detail']['findings'][0]['Id'])\n\
          \    S3BucketName = S3BucketArn.replace(\"arn:aws:s3:::\", \"\")\n    SSEAlgorithm = 'AES256'\n    ssm = boto3.client('ssm')\n    try:\n        response = ssm.start_automation_execution(\n   \
          \         DocumentName='AWS-EnableS3BucketEncryption',\n            DocumentVersion='1', # default\n            Parameters={\n                'BucketName': [ S3BucketName ],\n                'SSEAlgorithm':\
          \ [SSEAlgorithm]\n            }\n        )\n    except Exception as e:\n        print(e)\n        print(\"SSM automation execution error\")\n        raise\n"
  S3BucketServerSideEncryptionEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: S3BucketServerSideEncryptionEnabledLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - iam:PassRole
                  - s3:*
                  - kms:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudtrail:UpdateTrail
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  S3ReplicationEnabledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: S3ReplicationEnabledRule
      Description: '[PCI.S3.3] S3 buckets should have cross-region replication enabled'
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - S3ReplicationEnabledActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - S3ReplicationEnabledLambda
              - Arn
          Id: PCIS33
  S3ReplicationEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: PCIS33
      Description: PCI S3.3 S3 buckets should have cross-region replication enabled
      Id: PCIS33
  S3ReplicationEnabledPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: S3ReplicationEnabledLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - S3ReplicationEnabledRule
          - Arn
  S3ReplicationEnabledLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: S3ReplicationEnabledLambda
      Description: PCI S3.3 S3 buckets should have cross-region replication enabled
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - S3ReplicationEnabledLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Environment:
        Variables:
          DestinationBucketName:
            Fn::ImportValue: S3ReplicationBucketFullName
          S3IAMReplicationRole:
            Fn::ImportValue: S3BucketReplicationRoleArn
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n    S3BucketArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])\n    SourceBucketName = S3BucketArn.replace(\"\
          arn:aws:s3:::\", \"\")\n    DestinationBucketName = os.environ['DestinationBucketName']\n    S3IAMReplicationRole = os.environ['S3IAMReplicationRole']\n\n    ssm = boto3.client('ssm')\n    try:\n\
          \        response = ssm.start_automation_execution(\n            DocumentName='PCIS33Automation',\n            DocumentVersion='1', # default\n            Parameters={\n                'S3IAMReplicationRole':\
          \ [ S3IAMReplicationRole ],\n                'SourceBucketName': [ SourceBucketName],\n                'DestinationBucketName': [DestinationBucketName]\n            }\n        )\n    except Exception\
          \ as e:\n        print(e)\n        print(\"SSM automation execution error\")\n        raise\n"
  S3ReplicationEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: S3ReplicationEnabledLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - iam:PassRole
                  - s3:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudtrail:UpdateTrail
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  SSMBaselinePatchComplianceEnabledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: SSMBaselinePatchComplianceEnabledRule
      Description: '[PCI.SSM.1] Amazon EC2 instances managed by Systems Manager should have a patch compliance status of COMPLIANT after a patch installation'
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - SSMBaselinePatchComplianceEnabledActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - SSMBaselinePatchComplianceEnabledLambda
              - Arn
          Id: PCISSM1
  SSMBaselinePatchComplianceEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: PCISSM1
      Description: '[PCI.SSM.1] Amazon EC2 instances managed by Systems Manager should have a patch compliance status of COMPLIANT after a patch installation'
      Id: PCISSM1
  SSMBaselinePatchComplianceEnabledPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: SSMBaselinePatchComplianceEnabledLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - SSMBaselinePatchComplianceEnabledRule
          - Arn
  SSMBaselinePatchComplianceEnabledLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SSMBaselinePatchComplianceEnabledLambda
      Description: '[PCI.SSM.1] Amazon EC2 instances managed by Systems Manager should have a patch compliance status of COMPLIANT after a patch installation'
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - SSMBaselinePatchComplianceEnabledLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n\n    SSMInstanceArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])\n    SSMInstanceArn_1 = SSMInstanceArn.split('::')[-1]\
          \ \n    InstanceId = SSMInstanceArn_1.replace(\"instance/\",\"\")\n  \n    ssm = boto3.client('ssm')\n    try:\n      \n       response = ssm.send_command(\n            InstanceIds=[ InstanceId\
          \ ],\n            DocumentName='AWS-RunPatchBaseline',\n            DocumentVersion='1',\n            TimeoutSeconds=360,\n            Comment='RunPatchBaseline Invoked in response to Security\
          \ Hub finding',\n            Parameters={ 'Operation': [ 'Install' ] },\n            CloudWatchOutputConfig={ 'CloudWatchOutputEnabled': True }\n        )\n\n    except Exception as e:\n     \
          \   print(e)\n        print(\"SSM automation execution error\")\n        raise\n"
  SSMBaselinePatchComplianceEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: SSMBaselinePatchComplianceEnabledLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - ssm:*
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - iam:PassRole
                  - ec2:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudtrail:UpdateTrail
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  RestrictPublicAccessLambdaEnabledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: RestrictPublicAccessLambdaEnabledRule
      Description: '[PCI.Lambda.1] Lambda functions should prohibit public access'
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - RestrictPublicAccessLambdaEnabledActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - RestrictPublicAccessLambdaEnabledLambda
              - Arn
          Id: PCILambda1
  RestrictPublicAccessLambdaEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: PCILambda1
      Description: '[PCI.Lambda.1] Lambda functions should prohibit public access'
      Id: PCILambda1
  RestrictPublicAccessLambdaEnabledPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: RestrictPublicAccessLambdaEnabledLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - RestrictPublicAccessLambdaEnabledRule
          - Arn
  RestrictPublicAccessLambdaEnabledLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: RestrictPublicAccessLambdaEnabledLambda
      Description: '[PCI.Lambda.1] Lambda functions should prohibit public access'
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - RestrictPublicAccessLambdaEnabledLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Environment:
        Variables:
          accountID:
            Ref: AWS::AccountId
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n    functionname = str(event['detail']['findings'][0]['Resources'][0]['Details']['AwsLambdaFunction']['FunctionName'])\n\
          \    Id = str(event['detail']['findings'][0]['Id'])\n    accountID = os.environ['accountID']\n    ssm = boto3.client('ssm')\n    try:\n        response = ssm.start_automation_execution(\n    \
          \        DocumentName='PCILambda1Automation',\n            DocumentVersion='1', # default\n            Parameters={\n                'functionname': [ functionname ],\n                'accountID':\
          \ [accountID]\n            }\n        )\n    except Exception as e:\n        print(e)\n        print(\"SSM automation execution error\")\n        raise\n"
  RestrictPublicAccessLambdaEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: RestrictPublicAccessLambdaEnabledLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - iam:PassRole
                  - lambda:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudtrail:UpdateTrail
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  RestrictLambdaVPCLambdaEnabledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: RestrictLambdaVPCLambdaEnabledRule
      Description: '[PCI.Lambda.2] Lambda functions should be in a VPC'
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - RestrictLambdaVPCLambdaEnabledActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - RestrictLambdaVPCLambdaEnabledLambda
              - Arn
          Id: PCILambda2
  RestrictLambdaVPCLambdaEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: PCILambda2
      Description: '[PCI.Lambda.2] Lambda functions should be in a VPC'
      Id: PCILambda2
  RestrictLambdaVPCLambdaEnabledPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: RestrictLambdaVPCLambdaEnabledLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - RestrictLambdaVPCLambdaEnabledRule
          - Arn
  RestrictLambdaVPCLambdaEnabledLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: RestrictLambdaVPCLambdaEnabledLambda
      Description: '[PCI.Lambda.2] Lambda functions should be in a VPC'
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - RestrictLambdaVPCLambdaEnabledLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Environment:
        Variables:
          securitygroupid:
            Fn::ImportValue: securitygroup1
          subnet1id:
            Fn::ImportValue: subnet1
          subnet2id:
            Fn::ImportValue: subnet2
          rolearn:
            Fn::ImportValue: RestrictLambdaVPCRoleArn
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n    functionname = str(event['detail']['findings'][0]['Resources'][0]['Details']['AwsLambdaFunction']['FunctionName'])\n\
          \    Id = str(event['detail']['findings'][0]['Id'])\n\n    ssm = boto3.client('ssm')\n    rolearn = os.environ['rolearn']\n    securitygroupid = os.environ['securitygroupid']\n    subnet1id =\
          \ os.environ['subnet1id']\n    subnet2id = os.environ['subnet2id']\n\n    try:\n        response = ssm.start_automation_execution(\n            DocumentName='PCILambda2Automation',\n         \
          \   DocumentVersion='1', # default\n            Parameters={\n                'functionname': [functionname],\n                'rolearn': [rolearn],\n                'subnet1id': [subnet1id],\n\
          \                'subnet2id': [subnet2id],\n                'securitygroupid': [ securitygroupid]\n             \n            }\n        )\n    except Exception as e:\n        print(e)\n     \
          \   print(\"SSM automation execution error\")\n        raise\n"
  RestrictLambdaVPCLambdaEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: RestrictLambdaVPCLambdaEnabledLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - iam:PassRole
                  - lambda:*
                  - ec2:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudtrail:UpdateTrail
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  RDSNonPublicInstanceEnabledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: RDSNonPublicInstanceEnabledRule
      Description: '[PCI.RDS.2] RDS instances should prohibit public access'
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - RDSNonPublicInstanceEnabledActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - RDSNonPublicInstanceEnabledLambda
              - Arn
          Id: PCIRDS2
  RDSNonPublicInstanceEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: PCIRDS2
      Description: '[PCI.RDS.2] RDS instances should prohibit public access'
      Id: PCIRDS2
  RDSNonPublicInstanceEnabledPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: RDSNonPublicInstanceEnabledLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - RDSNonPublicInstanceEnabledRule
          - Arn
  RDSNonPublicInstanceEnabledLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: RDSNonPublicInstanceEnabledLambda
      Description: '[PCI.RDS.2] RDS instances should prohibit public access'
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - RDSNonPublicInstanceEnabledLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n    dbinstanceArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])\n    dbinstanceId = dbinstanceArn.split(':')[-1]\
          \ \n\n    ssm = boto3.client('ssm')\n    try:\n        response = ssm.start_automation_execution(\n            DocumentName='PCIRDS2Automation',\n            DocumentVersion='1', # default\n \
          \           Parameters={\n                'dbinstanceId': [ dbinstanceId ]\n            }\n        )\n    except Exception as e:\n        print(e)\n        print(\"SSM automation execution error\"\
          )\n        raise\n"
  RDSNonPublicInstanceEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: RDSNonPublicInstanceEnabledLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - iam:PassRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudtrail:UpdateTrail
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  RedshiftNonPublicClusterEnabledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: RedshiftNonPublicClusterEnabledRule
      Description: '[PCI.Redshift.1] Amazon Redshift clusters should prohibit public access'
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - RedshiftNonPublicClusterEnabledActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - RedshiftNonPublicClusterEnabledLambda
              - Arn
          Id: PCIRedshift1
  RedshiftNonPublicClusterEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: PCIRedshift1
      Description: '[PCI.Redshift.1] Amazon Redshift clusters should prohibit public access'
      Id: PCIRedshift1
  RedshiftNonPublicClusterEnabledPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: RedshiftNonPublicClusterEnabledLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - RedshiftNonPublicClusterEnabledRule
          - Arn
  RedshiftNonPublicClusterEnabledLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: RedshiftNonPublicClusterEnabledLambda
      Description: '[PCI.Redshift.1] Amazon Redshift clusters should prohibit public access'
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - RedshiftNonPublicClusterEnabledLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n    clusterArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])\n    clusterId = clusterArn.split(':')[-1]\n\
          \    ssm = boto3.client('ssm')\n    try:\n        response = ssm.start_automation_execution(\n            DocumentName='PCIRedshift1Automation',\n            DocumentVersion='1', # default\n \
          \           Parameters={\n                'clusterId': [ clusterId ]\n            }\n        )\n    except Exception as e:\n        print(e)\n        print(\"SSM automation execution error\")\n\
          \        raise\n"
  RedshiftNonPublicClusterEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: RedshiftNonPublicClusterEnabledLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - iam:PassRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudtrail:UpdateTrail
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  RDSPublicNonRestoreSnapshotEnabledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: RDSPublicNonRestoreSnapshotEnabledRule
      Description: '[PCI.RDS.1] RDS snapshots should prohibit public access'
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - RDSPublicNonRestoreSnapshotEnabledActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - RDSPublicNonRestoreSnapshotEnabledLambda
              - Arn
          Id: PCIRDS1
  RDSPublicNonRestoreSnapshotEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: PCIRDS1
      Description: '[PCI.RDS.1] RDS snapshots should prohibit public access'
      Id: PCIRDS1
  RDSPublicNonRestoreSnapshotEnabledPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: RDSPublicNonRestoreSnapshotEnabledLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - RDSPublicNonRestoreSnapshotEnabledRule
          - Arn
  RDSPublicNonRestoreSnapshotEnabledLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: RDSPublicNonRestoreSnapshotEnabledLambda
      Description: '[PCI.RDS.1] RDS snapshots should prohibit public access'
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - RDSPublicNonRestoreSnapshotEnabledLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n    snapshotArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])\n    snapshotType = str(event['detail']['findings'][0]['Resources'][0]['Type'])\n\
          \    snapshotId = snapshotArn.split(':')[-1]\n    ssm = boto3.client('ssm')\n    try:\n        response = ssm.start_automation_execution(\n            DocumentName='PCIRDS1Automation',\n     \
          \       DocumentVersion='1', # default\n            Parameters={\n                'snapshotId': [snapshotId],\n                'snapshotType': [snapshotType]\n            }\n        )\n    except\
          \ Exception as e:\n        print(e)\n        print(\"SSM automation execution error\")\n        raise\n"
  RDSPublicNonRestoreSnapshotEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: RDSPublicNonRestoreSnapshotEnabledLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - iam:PassRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudtrail:UpdateTrail
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  VPCFlowLogsEnabledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: VPCFlowLogsEnabledRule
      Description: PCI EC2.6 – Ensure VPC flow logging is enabled in all VPCs
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - VPCFlowLogsEnabledActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - VPCFlowLogsEnabledLambda
              - Arn
          Id: PCIEC26
  VPCFlowLogsEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: PCIEC26
      Description: PCIEC26
      Id: PCIEC26
  VPCFlowLogsEnabledPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: VPCFlowLogsEnabledLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - VPCFlowLogsEnabledRule
          - Arn
  VPCFlowLogsEnabledLambda:
    Type: AWS::Lambda::Function
    DependsOn: VPCFlowLogsEnabledLambdaRole
    Properties:
      FunctionName: VPCFlowLogsEnabledLambda
      Description: PCI EC2.6
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - VPCFlowLogsEnabledLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Environment:
        Variables:
          CloudWatchLogGroupArn:
            Fn::ImportValue: FlowLogsCloudWatchLogGroupArn
          CloudWatchLogGroupName:
            Fn::ImportValue: FlowLogsCloudWatchLogs
          FlowLogRoleArn:
            Fn::ImportValue: FlowLogsRoleArn
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n\n    VpcArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])\n    VpcId_1 = VpcArn.split(':')[-1]\
          \ \n    VpcId = VpcId_1.replace(\"vpc/\",\"\")\n    Id = str(event['detail']['findings'][0]['Id'])\n    CloudWatchLogGroupArn = os.environ['CloudWatchLogGroupArn']\n    CloudWatchLogGroupName\
          \  = os.environ['CloudWatchLogGroupName']\n    FlowLogRoleArn  = os.environ['FlowLogRoleArn']\n    ssm = boto3.client('ssm')\n    try:\n        response = ssm.start_automation_execution(\n   \
          \         DocumentName='PCIEC26Automation',\n            DocumentVersion='1', # default\n            Parameters={\n                'FlowLogRoleArn': [ FlowLogRoleArn ],\n                'CloudWatchLogGroupArn':\
          \ [ CloudWatchLogGroupArn ],\n                'CloudWatchLogGroupName': [ CloudWatchLogGroupName ],\n                'VpcId': [ VpcId ]\n            }\n        )\n\n    except Exception as e:\n\
          \        print(e)\n        print(\"SSM automation execution error\")\n        raise\n"
  VPCFlowLogsEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: VPCFlowLogsEnabledLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - iam:PassRole
                  - ec2:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudtrail:UpdateTrail
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  EBSPublicNonRestoreSnapshotEnabledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: EBSPublicNonRestoreSnapshotEnabledRule
      Description: '[PCI.EC2.1] Amazon EBS snapshots should not be publicly restorable'
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - EBSPublicNonRestoreSnapshotEnabledActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - EBSPublicNonRestoreSnapshotEnabledLambda
              - Arn
          Id: PCIEC2.1
  EBSPublicNonRestoreSnapshotEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: PCIEC21
      Description: '[PCI.EC2.1] Amazon EBS snapshots should not be publicly restorable'
      Id: PCIEC21
  EBSPublicNonRestoreSnapshotEnabledPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: EBSPublicNonRestoreSnapshotEnabledLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - EBSPublicNonRestoreSnapshotEnabledRule
          - Arn
  EBSPublicNonRestoreSnapshotEnabledLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: EBSPublicNonRestoreSnapshotEnabledLambda
      Description: '[PCI.EC2.1] Amazon EBS snapshots should not be publicly restorable'
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - EBSPublicNonRestoreSnapshotEnabledLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n    snapshotId = str(event['detail']['findings'][0]['Resources'][0]['Details']['AwsEc2Volume']['SnapshotId'])\n\
          \    Id = str(event['detail']['findings'][0]['Id'])\n    ssm = boto3.client('ssm')\n    try:\n        response = ssm.start_automation_execution(\n            DocumentName='PCIEC21Automation',\n\
          \            DocumentVersion='1', # default\n            Parameters={\n                'snapshotId': [ snapshotId ]\n            }\n        )\n    except Exception as e:\n        print(e)\n  \
          \      print(\"SSM automation execution error\")\n        raise\n"
  EBSPublicNonRestoreSnapshotEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: EBSPublicNonRestoreSnapshotEnabledLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - iam:PassRole
                  - ec2:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudtrail:UpdateTrail
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
