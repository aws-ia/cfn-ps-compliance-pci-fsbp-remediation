Description: AWS Security Hub FSBP Remediations Security Hub Custom Actions
AWSTemplateFormatVersion: '2010-09-09'
Resources:
  CreateSecurityHubCustomActionTargetLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FSBP-CreateSecurityHubCustomActionTargetLambda
      Description: Custom resource to create an action target in Security Hub
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        ZipFile: "import boto3\nimport cfnresponse\nimport os\ndef lambda_handler(event, context):\n    try:\n        properties = event['ResourceProperties']\n        region = os.environ['AWS_REGION']\n\
          \        client = boto3.client('securityhub', region_name=region)\n        responseData = {}\n        if event['RequestType'] == 'Create':\n            response = client.create_action_target(\n\
          \                Name=properties['Name'],\n                Description=properties['Description'],\n                Id=properties['Id']\n            )\n            responseData['Arn'] = response['ActionTargetArn']\n\
          \        elif event['RequestType'] == 'Delete':\n            account_id = context.invoked_function_arn.split(\":\")[4]\n            client.delete_action_target(\n                ActionTargetArn=f\"\
          arn:aws:securityhub:{region}:{account_id}:action/custom/{properties['Id']}\"\n            )\n        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)\n    except Exception as\
          \ e:\n        print(e)\n        cfnresponse.send(event, context, cfnresponse.FAILED, {})\n"
  CreateSecurityHubCustomActionTargetLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: CreateActionTarget-LambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - securityhub:CreateActionTarget
                  - securityhub:DeleteActionTarget
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  IAMRotate90daysEnabledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: FSBP-IAMRotate90daysEnabledRule
      Description: IAM3 â€“ Disable and Rotate IAM Access Key that is older than 90 days
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - IAMRotate90daysEnabledActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - IAMRotate90daysEnabledLambda
              - Arn
          Id: IAM3
  IAMRotate90daysEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: IAM3
      Description: IAM.3 Events from Security Hub
      Id: IAM3
  IAMRotate90daysEnabledPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: IAMRotate90daysEnabledLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - IAMRotate90daysEnabledRule
          - Arn
  IAMRotate90daysEnabledLambda:
    Type: AWS::Lambda::Function
    DependsOn: IAMRotate90daysEnabledLambdaRole
    Properties:
      FunctionName: FSBP-IAMRotate90daysEnabledLambda
      Description: IAM3 Remediation using Custom SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - IAMRotate90daysEnabledLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n    userArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])\n    userArn_1 = userArn.split(':')[-1]\
          \ \n    username = userArn_1.replace(\"user/\",\"\")\n    ssm = boto3.client('ssm')\n    try:\n        response = ssm.start_automation_execution(\n            DocumentName='FSBPIAM3Automation',\n\
          \            DocumentVersion='1', # default\n            Parameters={\n                'username': [ username ]\n            }\n        )\n    except Exception as e:\n        print(e)\n      \
          \  print(\"SSM automation execution error\")\n        raise\n"
  IAMRotate90daysEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: IAMRotate90daysEnabledLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - iam:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - iam:PassRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudtrail:UpdateTrail
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  SSMQuickSetupEnabledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: FSBP-SSMQuickSetupEnabledRule
      Description: '[SSM.1] EC2 instances should be managed by AWS Systems Manager'
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - SSMQuickSetupEnabledActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - SSMQuickSetupEnabledLambda
              - Arn
          Id: SSM1
  SSMQuickSetupEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: SSM1
      Description: SSM.1 EC2 instances should be managed by AWS Systems Manager
      Id: SSM1
  SSMQuickSetupEnabledPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: SSMQuickSetupEnabledLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - SSMQuickSetupEnabledRule
          - Arn
  SSMQuickSetupEnabledLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FSBP-SSMQuickSetupEnabledLambda
      Description: '[SSM.1] EC2 instances should be managed by AWS Systems Manager '
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - SSMQuickSetupEnabledLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Environment:
        Variables:
          SSMInstanceProfileRoleArn:
            Fn::ImportValue: FSBP-SSMInstanceProfileRoleArn
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n    InstanceId = str(event['detail']['findings'][0]['ProductFields']['attributes:5/value'])\n    ssminstanceprofilerole_arn\
          \ = os.environ['SSMInstanceProfileRoleArn']\n    roleArn_1 = ssminstanceprofilerole_arn.split(':')[-1] \n    rolename = roleArn_1.replace(\"role/\",\"\")\n    iam = boto3.client('iam')\n    ssm\
          \ = boto3.client('ssm')\n    ec2 = boto3.client('ec2')\n    try:\n       \n       response_iam_1 = iam.create_instance_profile(\n            InstanceProfileName='EC2ManagedInstanceProfile',\n\
          \       )\n\n       InstanceProfileArn = response_iam_1['InstanceProfile']['Arn']\n\n       response_iam_2 = iam.add_role_to_instance_profile(\n            InstanceProfileName='EC2ManagedInstanceProfile',\n\
          \            RoleName=rolename\n       )\n       \n       response_ec2 = ec2.associate_iam_instance_profile(\n           IamInstanceProfile={\n               'Name': 'EC2ManagedInstanceProfile'\n\
          \               'Arn': InstanceProfileArn\n           },\n           InstanceId=InstanceId\n       )\n\n       response = ssm.create_association(\n            Name='AWS-UpdateSSMAgent',\n    \
          \        Targets=[\n                {\n                    'Key': 'InstanceIds',\n                    'Value': InstanceId\n                }\n\n            ]\n       )\n\n    except Exception\
          \ as e:\n        print(e)\n        print(\"SSM automation execution error\")\n        raise\n"
  SSMQuickSetupEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: FSBP-SSMQuickSetupEnabledLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - ssm:*
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - iam:PassRole
                  - ec2:*
                  - iam:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudtrail:UpdateTrail
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  RestrictPublicAccessLambdaEnabledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: FSBP-RestrictPublicAccessLambdaEnabledRule
      Description: '[Lambda.1] Lambda functions should prohibit public access'
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - RestrictPublicAccessLambdaEnabledActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - RestrictPublicAccessLambdaEnabledLambda
              - Arn
          Id: Lambda1
  RestrictPublicAccessLambdaEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: Lambda1
      Description: '[Lambda.1] Lambda functions should prohibit public access'
      Id: Lambda1
  RestrictPublicAccessLambdaEnabledPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: RestrictPublicAccessLambdaEnabledLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - RestrictPublicAccessLambdaEnabledRule
          - Arn
  RestrictPublicAccessLambdaEnabledLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FSBP-RestrictPublicAccessLambdaEnabledLambda
      Description: '[PCI.Lambda.1] Lambda functions should prohibit public access'
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - RestrictPublicAccessLambdaEnabledLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Environment:
        Variables:
          accountID:
            Ref: AWS::AccountId
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n    functionname = str(event['detail']['findings'][0]['Resources'][0]['Details']['AwsLambdaFunction']['FunctionName'])\n\
          \    Id = str(event['detail']['findings'][0]['Id'])\n    accountID = os.environ['accountID']\n    ssm = boto3.client('ssm')\n    try:\n        response = ssm.start_automation_execution(\n    \
          \        DocumentName='FSBPLambda1Automation',\n            DocumentVersion='1', # default\n            Parameters={\n                'functionname': [ functionname ],\n                'accountID':\
          \ [accountID]\n            }\n        )\n    except Exception as e:\n        print(e)\n        print(\"SSM automation execution error\")\n        raise\n"
  RestrictPublicAccessLambdaEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: RestrictPublicAccessLambdaEnabledLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - iam:PassRole
                  - lambda:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudtrail:UpdateTrail
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  GuardDutyEnabledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: FSBP-GuardDutyEnabledRule
      Description: '[GuardDuty.1] GuardDuty should be enabled'
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - GuardDutyEnabledActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - GuardDutyEnabledLambda
              - Arn
          Id: GuardDuty1
  GuardDutyEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: GuardDuty1
      Description: '[GuardDuty.1] GuardDuty should be enabled'
      Id: GuardDuty1
  GuardDutyEnabledPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: GuardDutyEnabledLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - GuardDutyEnabledRule
          - Arn
  GuardDutyEnabledLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FSBP-GuardDutyEnabledLambda
      Description: GuardDuty.1 GuardDuty should be enabled
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - GuardDutyEnabledLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n    findingpublishingfrequency='FIFTEEN_MINUTES'\n    ssm = boto3.client('ssm')\n    try:\n        response =\
          \ ssm.start_automation_execution(\n            DocumentName='FSBPGuardDuty1Automation',\n            DocumentVersion='1', # default\n            Parameters={\n                'findingpublishingfrequency':\
          \ [ findingpublishingfrequency ]\n            }\n        )\n    except Exception as e:\n        print(e)\n        print(\"SSM automation execution error\")\n        raise\n"
  GuardDutyEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: FSBP-GuardDutyEnabledLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - iam:PassRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudtrail:UpdateTrail
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  LatestRuntimeLambdaEnabledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: FSBP-LatestRuntimeLambdaEnabledRule
      Description: '[Lambda.2] Lambda functions should use latest runtimes'
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - LatestRuntimeLambdaEnabledActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - LatestRuntimeLambdaEnabledLambda
              - Arn
          Id: Lambda2
  LatestRuntimeLambdaEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: Lambda2
      Description: '[Lambda.2] Lambda functions should use latest runtimes'
      Id: Lambda2
  LatestRuntimeLambdaEnabledPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: LatestRuntimeLambdaEnabledLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - LatestRuntimeLambdaEnabledRule
          - Arn
  LatestRuntimeLambdaEnabledLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FSBP-LatestRuntimeLambdaEnabledLambda
      Description: '[Lambda.2] Lambda functions should use latest runtimes'
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - LatestRuntimeLambdaEnabledLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 60
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n    functionname = str(event['detail']['findings'][0]['Resources'][0]['Details']['AwsLambdaFunction']['FunctionName'])\n\
          \    Id = str(event['detail']['findings'][0]['Id'])\n    ssm = boto3.client('ssm')\n    try:\n        response = ssm.start_automation_execution(\n            DocumentName='FSBPLambda2Automation',\n\
          \            DocumentVersion='1', # default\n            Parameters={\n                'functionname': [ functionname ]\n            }\n        )\n    except Exception as e:\n        print(e)\n\
          \        print(\"SSM automation execution error\")\n        raise\n"
  LatestRuntimeLambdaEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: FSBP-LatestRuntimeLambdaEnabledLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - iam:PassRole
                  - lambda:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudtrail:UpdateTrail
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  EBSVolumeEncryptionEnabledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: FSBP-EBSVolumeEncryptionEnabledRule
      Description: '[EC2.3] Attached EBS volumes should be encrypted at-rest'
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - EBSVolumeEncryptionEnabledActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - EBSVolumeEncryptionEnabledLambda
              - Arn
          Id: EC23
  EBSVolumeEncryptionEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: EC23
      Description: '[EC2.3] Attached EBS volumes should be encrypted at-rest'
      Id: EC23
  EBSVolumeEncryptionEnabledPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: EBSVolumeEncryptionEnabledLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - EBSVolumeEncryptionEnabledRule
          - Arn
  EBSVolumeEncryptionEnabledLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FSBP-EBSVolumeEncryptionEnabledLambda
      Description: '[EC2.3] Attached EBS volumes should be encrypted at-rest'
      Handler: index.lambda_handler
      MemorySize: 768
      Role:
        Fn::GetAtt:
          - EBSVolumeEncryptionEnabledLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 875
      Environment:
        Variables:
          kmskeyArn:
            Fn::ImportValue: FSBP-KMSKeyArn
          sourceregion:
            Ref: AWS::Region
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n    ebsvolumeArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])\n    ebsvolumeId = ebsvolumeArn.split(':')[-1]\n\
          \    kmskeyArn = os.environ['kmskeyArn']\n    sourceregion = os.environ['sourceregion']\n\n    ssm = boto3.client('ssm')\n    try:\n        response = ssm.start_automation_execution(\n       \
          \     DocumentName='FSBPEC23Automation',\n            DocumentVersion='1', # default\n            Parameters={\n                'ebsvolumeId': [ ebsvolumeId ]\n                'kmskeyArn': [kmskeyArn]\n\
          \                'sourceregion': [sourceregion]\n            }\n        )\n    except Exception as e:\n        print(e)\n        print(\"SSM automation execution error\")\n        raise\n"
  EBSVolumeEncryptionEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: FSBP-EBSVolumeEncryptionEnabledLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - iam:PassRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudtrail:UpdateTrail
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  RDSInstanceEncryptionEnabledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: FSBP-RDSInstanceEncryptionEnabledRule
      Description: '[RDS.2] RDS instances should have encryption at rest enabled'
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Custom Action
        resources:
          - Fn::GetAtt:
              - RDSInstanceEncryptionEnabledActionTarget
              - Arn
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - RDSInstanceEncryptionEnabledLambda
              - Arn
          Id: RDS3
  RDSInstanceEncryptionEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateSecurityHubCustomActionTargetLambda
          - Arn
      Name: RDS3
      Description: '[RDS.3] RDS DB instances should have encryption at-rest enabled'
      Id: RDS3
  RDSInstanceEncryptionEnabledPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: RDSInstanceEncryptionEnabledLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - RDSInstanceEncryptionEnabledRule
          - Arn
  RDSInstanceEncryptionEnabledLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FSBP-RDSInstanceEncryptionEnabledLambda
      Description: '[RDS.3] RDS DB instances should have encryption at-rest enabled'
      Handler: index.lambda_handler
      MemorySize: 768
      Role:
        Fn::GetAtt:
          - RDSInstanceEncryptionEnabledLambdaRole
          - Arn
      Runtime: python3.10
      Timeout: 875
      Environment:
        Variables:
          kmskeyArn:
            Fn::ImportValue: FSBP-KMSKeyArn
      Code:
        ZipFile: "import boto3\nimport json\nimport os\ndef lambda_handler(event, context):\n    dbinstanceArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])\n    dbinstanceId = dbinstanceArn.split(':')[-1]\n\
          \    kmskeyArn = os.environ['kmskeyArn']\n\n    ssm = boto3.client('ssm')\n    try:\n        response = ssm.start_automation_execution(\n            DocumentName='FSBPRDS3Automation',\n      \
          \      DocumentVersion='1', # default\n            Parameters={\n                'dbinstanceId': [ dbinstanceId ]\n                'kmskeyArn': [kmskeyArn]\n            }\n        )\n    except\
          \ Exception as e:\n        print(e)\n        print(\"SSM automation execution error\")\n        raise\n"
  RDSInstanceEncryptionEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: FSBP-RDSInstanceEncryptionEnabledLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - iam:PassRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudtrail:UpdateTrail
                  - securityhub:UpdateFindings
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
Outputs: {}
